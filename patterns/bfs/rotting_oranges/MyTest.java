package patterns.bfs.rotting_oranges;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import lib.MyUnitTests;

public class MyTest extends MyUnitTests {
    Solution s = new BFS();

    @Test
    public void simple() {
        assertEquals(4, s.orangesRotting(new int[][] {
            {2,1,1},
            {1,1,0},
            {0,1,1}
        }));
    }

    @Test
    public void simple2() {
        assertEquals(1, s.orangesRotting(new int[][] {
            {1,2}
        }));
    }

    @Test
    public void notPossible() {
        assertEquals(-1, s.orangesRotting(new int[][] {
            {2,1,1},
            {0,1,1},
            {1,0,1}
        }));
    }

    @Test
    public void largerInput16x31() {
        // On my local machine, BFS is 5 to 8 times faster than BruteForce
        assertEquals(18, s.orangesRotting(new int[][] {
            {2,1,1,0,1,2,0,1,2,0,1,1,0,2,0,1,2,0,1,2,0,1,0,0,1,1,1,2,0,1,2},
            {1,1,0,2,1,1,0,1,2,0,1,2,0,1,1,0,2,0,1,2,0,1,2,0,1,0,0,1,0,0,2},
            {0,1,1,0,1,2,0,1,2,0,1,1,0,2,0,1,0,0,1,2,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2},
            {1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,2,0,1,2}
        }));
    }
}
